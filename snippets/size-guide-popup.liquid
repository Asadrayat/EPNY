<style>
    .size__popup {
    display: flex;
    position: fixed;
    top: 0;
    right: 0;
    width: 100%;
    height: 100%;
    transform: translateX(0%);
    background: rgba(0, 0, 0, 0.5);
    justify-content: flex-end;
    align-items: center;
    z-index: 9999;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease-in-out;
  }

  .size__popup-content {
    background: white;
    padding: 15px;
    /* border-radius: 10px; */
    max-width: 800px;
    width: 100%%;
    max-height: 100%;
    position: relative;
    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease-in-out;
    overflow-y: auto;
    transform: translateX(100%);
  }

  .size__popup.show {
    transform: translateX(0);
    opacity: 1;
    visibility: visible;
  }

  .size__popup.show .size__popup-content {
    transform: translateX(0%);
  }
  .size__popup-header{
    display: flex;
    align-items: center;
    gap: 32px;
    padding: 0 0 24px;
    border-bottom: 1px solid var(--Border-Base-main, #D1D5DB);
    justify-content: space-between;
  }
  .header__contents h4{
    color: #000;
    font-family: var(--font-family-Title)
    font-size: var(--Font-Size-Heading-H3);
    line-height: var(--Line-Height-Heading-H3); /* 116.667% */
    letter-spacing: -0.48px;
    margin: 0 0  var(--Spacing-Container-xxs);
  }
  .header__contents p{
    color: #000;
    font-family: var(--font-family-Body);
    font-size: 16px;
    line-height: 20px; /* 125% */
    margin: 0;
  }
  #closePopup {
    background: none;
    border: none;
    outline: none;
    cursor: pointer;
  }

  .size__popup.hide {
    opacity: 0;
    visibility: hidden;
    transform: translateX(0%);
  }

  .size__popup.hide .size__popup-content {
    transform: translateX(100%)
  }
</style>
<div id="size__popup" class="size__popup">
  <div class="size__popup-content">
    <div class="size__popup-header">
      <div class="header__contents">
        <h4>Size Guide</h4>
        {% comment %}
          <p>Baruffa Merino Quarter Zip Wind Sweater</p>
        {% endcomment %}
      </div>
      <button id="closePopup" class="closePopup close">{% render 'all-icons', name: 'close' %}</button>
    </div>
    <div class="sizecharts">
      {% render 'size-chart-contents' %}
    </div>
  </div>
</div>

<script>
  window.addEventListener("DOMContentLoaded", (event) => {
    window.sizeGuide();

        // Handle size chart toggles (if needed)
    let charts = document.querySelectorAll('.--single-chart');

    charts.forEach((chart) => {
      let toggleButton = chart.querySelector('.--toggle');

      if (toggleButton) {
        toggleButton.addEventListener('change', () => {
          let toUnit = toggleButton.checked ? "cm" : "in";
          convertMeasurements(chart, toUnit);
        });
      }
    });

    function convertMeasurements(chart, toUnit) {
      let rows = chart.querySelectorAll('.--measurement-row.--only-values');

      rows.forEach((row) => {
        let waistCell = row.children[1];
        let chestCell = row.children[2];
        let neckCell = row.children[3];
        let sleeveCell = row.children[4];
        waistCell.textContent = convertUnits(parseFloat(waistCell.textContent), toUnit);
        chestCell.textContent = convertUnits(parseFloat(chestCell.textContent), toUnit);
        neckCell.textContent = convertUnits(parseFloat(neckCell.textContent), toUnit);
        sleeveCell.textContent = convertUnits(parseFloat(sleeveCell.textContent), toUnit);
      });
    }

    function convertUnits(value, toUnit) {
      if (isNaN(value)) return "N/A";
      return toUnit === "cm"
        ? (value * 2.54).toFixed(2)
        : (value / 2.54).toFixed(0);
    }
  });

  window.sizeGuide = function () {
    const popup = document.querySelector(".size__popup"); // Single popup
    const openPopupBtns = document.querySelectorAll(".openPopup"); // Multiple open buttons
    const closePopupBtn = document.querySelector(".closePopup"); // Single close button

    // Attach event listeners to all open buttons
    openPopupBtns.forEach((openPopupBtn) => {
      openPopupBtn.addEventListener("click", function () {
        popup.classList.add("show");
        popup.classList.remove("hide");
      });
    });

    // Attach event listener to the close button
    closePopupBtn.addEventListener("click", () => closePopup(popup));

    // Attach event listener to the popup for closing on outside click
    popup.addEventListener("click", function (event) {
      if (event.target === popup) {
        closePopup(popup);
      }
    });

    // Function to close the popup
    function closePopup(popup) {
      popup.classList.add("hide");
      setTimeout(() => {
        popup.classList.remove("show");
      }, 300);
    }


  };
</script>
